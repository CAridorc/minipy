                                
                              o         o
                    .--.--.   .  .--.   .  .,-. .  .
                    |  |  |   |  |  |   |  |   )|  |
                    '  '  `--' `-'  `--' `-|`-' `--|
                                           |       ;
                                           '    `-' 

                      minipy: a Python 2 minifier
                by Gareth Rees <http://garethrees.org/>


INTRODUCTION
------------

minipy is a minifier for Python 2. It rewrites Python 2 source code in a
way that preserves the meaning of the code while reducing it in
size. For example:

    $ cat fib.py
    cache = {0: 0, 1: 1, 2: 1, 3: 2}
    def fibonacci(n):
        """Return the nth Fibonacci number."""
        if n not in cache:
            a = n // 2
            r = n % 2
            m = (r * 2) - 1
            cache[n] = fibonacci(a + 1) ** 2 + m * fibonacci(a + r - 1) ** 2
        return cache[n]

    $ minipy --rename --docstrings fib.py
    a={0:0,1:1,2:1,3:2}
    def b(c):
     if c not in a:d=c//2;e=c%2;f=e*2-1;a[c]=b(d+1)**2+f*b(d+e-1)**2
     return a[c]


COMMAND LINE
------------

Usage: minipy [options] [-o OUTPUT] FILE

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -o OUTPUT, --output=OUTPUT
                        output file (default: stdout)
  -D, --docstrings      remove docstrings (implies --noselftest)
  -R, --rename          aggressively rename non-preserved variables
  -i INDENT, --indent=INDENT
                        number of spaces per indentation level
  -p PRESERVE, --preserve=PRESERVE
                        preserve words from renaming (separate by commas)
  --nojoinlines         put each statement on its own line
  --noselftest          skip the self-test
  --debug               dump the parse tree


RENAMING
--------

Python's use of introspection and duck typing means that it is not
possible to change names in a program without risk of changing the
meaning. The --rename option to minipy therefore makes a "best attempt"
to discover names that need to be preserved, but does not guarantee
anything. Use at your own risk!

The following names are preserved when renaming:

* Names specified on the command-line via the --preserve option
  (write --preserve=name1,name2,name3 to preserve more than one name).
* Built-in names (abs, all, any, apply, ...).
* Any name used as an attribute (.join, .index, .copy, .sort, ...).
* Any name starting with two underscores.
* The names of all imported modules.
* Any name exported by a module in a "from module import *" statement.
* Any name in the list assigned to the __all__ global variable.
